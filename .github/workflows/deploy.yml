name: Deploy

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || inputs.environment == 'staging'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        env:
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
          DEPLOY_USER: ${{ secrets.STAGING_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Deploy script
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /app/blue-ocean-explorer
            git pull origin main
            pnpm install --frozen-lockfile
            pnpm build
            pnpm db:migrate:prod
            pm2 restart blue-ocean-explorer
          EOF
          
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.blueoceanexplorer.com/health || exit 1
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || inputs.environment == 'production'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Backup database
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          # Create backup before deployment
          pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql
          # Upload to S3 or other backup storage
          
      - name: Deploy to production
        env:
          DEPLOY_KEY: ${{ secrets.PROD_DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.PROD_HOST }}
          DEPLOY_USER: ${{ secrets.PROD_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Deploy with zero-downtime
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /app/blue-ocean-explorer
            
            # Pull latest code
            git fetch --tags
            git checkout ${{ github.ref_name }}
            
            # Install dependencies
            pnpm install --frozen-lockfile --production
            
            # Build application
            pnpm build
            
            # Run migrations
            pnpm db:migrate:prod
            
            # Reload with zero downtime
            pm2 reload blue-ocean-explorer --update-env
            
            # Clean up old builds
            find .vinxi -type d -mtime +7 -exec rm -rf {} +
          EOF
          
      - name: Verify deployment
        run: |
          sleep 30
          # Health check
          curl -f https://blueoceanexplorer.com/health || exit 1
          
          # Version check
          DEPLOYED_VERSION=$(curl -s https://blueoceanexplorer.com/api/version)
          echo "Deployed version: $DEPLOYED_VERSION"
          
      - name: Run production tests
        run: |
          # Run subset of E2E tests against production
          pnpm test:e2e -- --grep "@smoke" --project=chromium
        env:
          BASE_URL: https://blueoceanexplorer.com
          
      - name: Create release
        uses: actions/create-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release
            - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          draft: false
          prerelease: false
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment of ${{ github.ref_name }} completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
        
      - name: Update status page
        if: success()
        run: |
          # Update external status page
          curl -X POST https://api.statuspage.io/v1/pages/$PAGE_ID/incidents \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "incident": {
                "name": "Deployment completed",
                "status": "resolved",
                "impact": "none",
                "body": "Version ${{ github.ref_name }} deployed successfully"
              }
            }'

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && (startsWith(github.ref, 'refs/tags/v') || inputs.environment == 'production')
    needs: deploy-production
    environment: production
    steps:
      - name: Rollback deployment
        env:
          DEPLOY_KEY: ${{ secrets.PROD_DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.PROD_HOST }}
          DEPLOY_USER: ${{ secrets.PROD_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /app/blue-ocean-explorer
            
            # Get previous tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
            
            # Rollback to previous version
            git checkout $PREVIOUS_TAG
            pnpm install --frozen-lockfile --production
            pnpm build
            pm2 reload blue-ocean-explorer
            
            echo "Rolled back to $PREVIOUS_TAG"
          EOF
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '⚠️ Production deployment failed! Rolled back to previous version'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}